{"version":3,"file":"formula-container.js","sourceRoot":"","sources":["../src/components/formula-container.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAEjE,OAAO,EAAC,SAAS,EAAC,MAAM,oCAAoC,CAAC;AAG7D,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,UAAU;IAAhD;;QA2BE,kBAAa,GAAG,CAAC,aAAqB,EAAE,EAAE,GAAE,CAAC,CAAC;QAG9C,eAAU,GAAG,CAAC,YAAoB,EAAE,kBAA0B,EAAE,EAAE,GAAE,CAAC,CAAC;IAwCxE,CAAC;IAtCS,iBAAiB;QACvB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACtE,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,EAAE,CAAC;IAC/B,CAAC;IAEO,oBAAoB,CAAC,KAAa;QACxC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;;;;;;;UAQL,IAAI,CAAC,OAAO,CAAC,GAAG,CAChB,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CACd,IAAI,CAAA;mBACG,IAAI,CAAC,IAAI;mBACT,IAAI,CAAC,MAAM,CAAC,iBAAiB;+BACjB,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;;;mBAGlD,CACV;;;;;2BAKkB,IAAI,CAAC,iBAAiB;;;KAG5C,CAAC;IACJ,CAAC;CACF,CAAA;AArEiB,uBAAM,GAAG,GAAG,CAAA;MACxB,SAAS;;;;;;;;;;;;;GAaX,CAAA;AAGF;IADC,KAAK,CAAC,iBAAiB,CAAC;0DACW;AAGpC;IADC,KAAK,CAAC,aAAa,CAAC;sDACW;AAGhC;IADC,QAAQ,EAAE;iDACc;AAGzB;IADC,QAAQ,EAAE;uDACmC;AAG9C;IADC,QAAQ,EAAE;oDAC2D;AA9B3D,gBAAgB;IAD5B,aAAa,CAAC,mBAAmB,CAAC;GACtB,gBAAgB,CAsE5B;SAtEY,gBAAgB","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property, query} from 'lit/decorators.js';\nimport {IResultsItem} from '../types';\nimport {minireset} from 'minireset.css/minireset.css.lit.js';\n\n@customElement('formula-container')\nexport class FormulaContainer extends LitElement {\n  static override styles = css`\n    ${minireset}\n\n    .formula-container {\n      margin-top: 40px;\n      display: flex;\n      flex-direction: column;\n    }\n    .row {\n      display: flex;\n    }\n    .row p {\n      margin-right: 10px;\n    }\n  `;\n\n  @query('#newFormulaName')\n  formulaNameInput!: HTMLInputElement;\n\n  @query('#newFormula')\n  formulaInput!: HTMLInputElement;\n\n  @property()\n  results!: IResultsItem[];\n\n  @property()\n  removeFormula = (_formulaIndex: number) => {};\n\n  @property()\n  addFormula = (_formulaName: string, _formulaDefinition: string) => {};\n\n  private _handleAddFormula() {\n    this.addFormula(this.formulaNameInput.value, this.formulaInput.value);\n    this.formulaNameInput.value = '';\n    this.formulaInput.value = '';\n  }\n\n  private _handleRemoveFormula(index: number) {\n    this.removeFormula(index);\n  }\n\n  override render() {\n    return html`\n      <div class=\"formula-container\">\n        <p>Formula definition</p>\n        <div class=\"row\">\n          <p>Formula name</p>\n          <p>Initial Formula</p>\n          <p>Action</p>\n        </div>\n        ${this.results.map(\n          (item, index) =>\n            html`<div class=\"row\">\n              <p>${item.name}</p>\n              <p>${item.values.formulaDefinition}</p>\n              <button @click=${() => this._handleRemoveFormula(index)}>\n                remove\n              </button>\n            </div>`\n        )}\n        <div class=\"row\">\n          <input id=\"newFormula\" />\n          <input id=\"newFormulaName\" />\n\n          <button @click=${this._handleAddFormula}>Add</button>\n        </div>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'formula-container': FormulaContainer;\n  }\n}\n"]}
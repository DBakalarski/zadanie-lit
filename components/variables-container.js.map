{"version":3,"file":"variables-container.js","sourceRoot":"","sources":["../src/components/variables-container.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAEjE,OAAO,EAAC,SAAS,EAAC,MAAM,oCAAoC,CAAC;AAG7D,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,UAAU;IAAlD;;QAsBE,mBAAc,GAAG,CAAC,cAAsB,EAAE,EAAE,GAAE,CAAC,CAAC;QAGhD,gBAAW,GAAG,CAAC,aAAqB,EAAE,EAAE,GAAE,CAAC,CAAC;IAkC9C,CAAC;IAhCS,kBAAkB;QACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;IACxB,CAAC;IACO,qBAAqB,CAAC,KAAa;QACzC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;;;;;;UAOL,IAAI,CAAC,SAAS,CAAC,GAAG,CAClB,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CACd,IAAI,CAAA;mBACG,IAAI,CAAC,IAAI;+BACG,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;;;mBAGnD,CACV;;;2BAGkB,IAAI,CAAC,kBAAkB;;;KAG7C,CAAC;IACJ,CAAC;CACF,CAAA;AA1DiB,yBAAM,GAAG,GAAG,CAAA;MACxB,SAAS;;;;;;;;;;;GAWX,CAAA;AAGF;IADC,KAAK,CAAC,cAAc,CAAC;iDACG;AAGzB;IADC,QAAQ,EAAE;qDACkB;AAG7B;IADC,QAAQ,EAAE;0DACqC;AAGhD;IADC,QAAQ,EAAE;uDACiC;AAzBjC,kBAAkB;IAD9B,aAAa,CAAC,qBAAqB,CAAC;GACxB,kBAAkB,CA2D9B;SA3DY,kBAAkB","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property, query} from 'lit/decorators.js';\nimport {IVariablesItem} from '../types';\nimport {minireset} from 'minireset.css/minireset.css.lit.js';\n\n@customElement('variables-container')\nexport class VariablesContainer extends LitElement {\n  static override styles = css`\n    ${minireset}\n    .variables-container {\n      display: flex;\n      flex-direction: column;\n    }\n    .row {\n      display: flex;\n    }\n    .row p {\n      margin-right: 10px;\n    }\n  `;\n\n  @query('#newVariable')\n  input!: HTMLInputElement;\n\n  @property()\n  variables!: IVariablesItem[];\n\n  @property()\n  removeVariable = (_variableIndex: number) => {};\n\n  @property()\n  addVariable = (_variableName: string) => {};\n\n  private _handleAddVariable() {\n    this.addVariable(this.input.value);\n    this.input.value = '';\n  }\n  private _handleRemoveVariable(index: number) {\n    this.removeVariable(index);\n  }\n\n  override render() {\n    return html`\n      <div class=\"variables-container\">\n        <p>Variable definition</p>\n        <div class=\"row\">\n          <p>Variable name</p>\n          <p>Action</p>\n        </div>\n        ${this.variables.map(\n          (item, index) =>\n            html`<div class=\"row\">\n              <p>${item.name}</p>\n              <button @click=${() => this._handleRemoveVariable(index)}>\n                remove\n              </button>\n            </div>`\n        )}\n        <div class=\"row\">\n          <input id=\"newVariable\" />\n          <button @click=${this._handleAddVariable}>Add</button>\n        </div>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'variables-container': VariablesContainer;\n  }\n}\n"]}
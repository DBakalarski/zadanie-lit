{"version":3,"file":"spreadsheet.js","sourceRoot":"","sources":["../src/components/spreadsheet.ts"],"names":[],"mappings":"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","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\nimport {minireset} from 'minireset.css/minireset.css.lit.js';\nimport {IData} from '../types';\n\n@customElement('spreadsheet-element')\nexport class SpreadsheetElement extends LitElement {\n  static override styles = css`\n    ${minireset}\n    .spreadsheet-container {\n      margin-top: 50px;\n    }\n\n    .single-column {\n      display: flex;\n      flex-direction: column;\n      min-width: 100px;\n      align-items: center;\n      margin-top: 20px;\n    }\n\n    .spreadsheet {\n      display: flex;\n    }\n\n    .spreadsheet-left {\n      display: flex;\n    }\n    .spreadsheet-right {\n      display: flex;\n    }\n  `;\n\n  @property()\n  data!: IData;\n\n  @property()\n  hamdleAddRow = () => {};\n\n  @property()\n  changeInput = (_value: string, _indexRow: number, _indexColum: number) => {};\n\n  private _handleInputChange = (\n    e: Event,\n    indexRow: number,\n    indexColum: number\n  ) => {\n    const input = e.target as HTMLInputElement;\n    this.changeInput(input.value, indexRow, indexColum);\n  };\n\n  private _transformFormulaToResult(\n    formulaDefinition: string,\n    indexRow: number\n  ) {\n    let formula = formulaDefinition;\n    // console.log('formula', formula);\n    const variablesName = this.data.variables.map((variable) => variable.name);\n    // console.log('variablesName', variablesName);\n    const formulaArray = formula\n      .split('+')\n      .join(',')\n      .split('-')\n      .join(',')\n      .split(',');\n    // console.log('formulaArray', formulaArray);\n    console.log('formula', formula);\n    console.log('formulaArray', formulaArray);\n    if (formula.includes(' ')) {\n      return '';\n    }\n\n    formulaArray.forEach((item) => {\n      if (variablesName.includes(item)) {\n        const indexColumn = this.data.variables.findIndex(\n          (variable) => variable.name == item\n        );\n        const value = this.data.variables[indexColumn].values[indexRow];\n\n        if (!value) {\n          formula = formula.replace(item, '0');\n        }\n        formula = formula.replace(item, value);\n      }\n      return 0;\n    });\n\n    return eval(formula);\n  }\n\n  private _handleAddRow() {\n    this.hamdleAddRow();\n  }\n\n  override render() {\n    return html`\n      <div class=\"spreadsheet-container\">\n        <p>spread sheet</p>\n        <div class=\"spreadsheet\">\n          <div class=\"spreadsheet-left\">\n            ${this.data.variables.map(\n              (variable, indexColum) => html`\n                <div class=\"single-column\">\n                  <p>${variable.name}</p>\n                  ${variable.values.map(\n                    (value, indexRow) =>\n                      html`<input\n                        .value=${value}\n                        @input=${(e: Event) =>\n                          this._handleInputChange(e, indexRow, indexColum)}\n                        type=\"number\"\n                      />`\n                  )}\n                </div>\n              `\n            )}\n          </div>\n          <div class=\"spreadsheet-right\">\n            ${this.data.results.map(\n              (result, indexColum) => html`\n                <div class=\"single-column\">\n                  <p>${result.name}</p>\n                  ${result.values.equal.map(\n                    (value, indexRow) =>\n                      html`<span\n                          >${this._transformFormulaToResult(\n                            value,\n                            indexRow\n                          )}</span\n                        >\n                        <!-- <span>${result.values.formulaDefinition}</span> -->\n                        <!-- <span>indexColum ${indexColum}</span>\n                        <span>indexRow ${indexRow}</span>  --> `\n                  )}\n                </div>\n              `\n            )}\n          </div>\n        </div>\n        <button @click=${this._handleAddRow}>Add row</button>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'spreadsheet-element': SpreadsheetElement;\n  }\n}\n"]}